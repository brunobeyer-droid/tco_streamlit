import streamlit as st
import uuid
from typing import Optional

from snowflake_db import ensure_tables, fetch_df, execute

try:
    from utils.sidebar import render_global_actions
except Exception:
    def render_global_actions():
        pass

st.set_page_config(page_title="Teams", page_icon="üë•", layout="wide")
render_global_actions()
ensure_tables()

# --- Ensure new columns exist (idempotent) ---
execute("ALTER TABLE TEAMS ADD COLUMN IF NOT EXISTS DELIVERY_TEAM_FTE FLOAT")
execute("ALTER TABLE TEAMS ADD COLUMN IF NOT EXISTS CONTRACTOR_C_FTE FLOAT")
execute("ALTER TABLE TEAMS ADD COLUMN IF NOT EXISTS CONTRACTOR_CS FLOAT")

st.title("üë• Teams")

@st.cache_data(ttl=180, show_spinner=False)
def _programs_df():
    return fetch_df("SELECT PROGRAMID, PROGRAMNAME FROM PROGRAMS ORDER BY PROGRAMNAME")

@st.cache_data(ttl=60, show_spinner=False)
def _teams_df():
    return fetch_df(
        """
        SELECT TEAMID, TEAMNAME, PROGRAMID, TEAMFTE,
               DELIVERY_TEAM_FTE, CONTRACTOR_C_FTE, CONTRACTOR_CS
        FROM TEAMS
        ORDER BY TEAMNAME
        """
    )

def _team_id_for_name_ci(name: str) -> Optional[str]:
    if not name:
        return None
    df = fetch_df("SELECT TEAMID FROM TEAMS WHERE UPPER(TEAMNAME)=UPPER(%s) LIMIT 1", (name.strip(),))
    if df is not None and not df.empty:
        return str(df.iloc[0]["TEAMID"])
    return None

programs = _programs_df()
teams = _teams_df()
st.dataframe(teams, use_container_width=True)

with st.expander("‚ûï Add New Team"):
    teamname = st.text_input("Team Name")
    programid = st.selectbox(
        "Program",
        options=(programs["PROGRAMID"].tolist() if programs is not None and not programs.empty else []),
        format_func=lambda x: programs.loc[programs["PROGRAMID"]==x,"PROGRAMNAME"].values[0] if programs is not None and not programs.empty else ""
    )
    teamfte = st.number_input("Team FTE", min_value=0.0, step=0.1)
    delivery_team_fte = st.number_input("Delivery Team FTE", min_value=0.0, step=0.1)
    contractor_c_fte = st.number_input("Contractor C FTE", min_value=0.0, step=0.1)
    contractor_cs = st.number_input("Contractor CS", min_value=0.0, step=0.1)

    if st.button("Create Team"):
        name = (teamname or "").strip()
        if not name:
            st.error("Team Name is required.")
        elif not programid:
            st.error("Program is required.")
        else:
            # Uniqueness on TEAMNAME (case-insensitive)
            existing_id = _team_id_for_name_ci(name)
            if existing_id:
                st.error(f"A Team named '{name}' already exists. Team names must be unique.")
            else:
                try:
                    teamid = str(uuid.uuid4())
                    execute(
                        """
                        INSERT INTO TEAMS (TEAMID, TEAMNAME, PROGRAMID, TEAMFTE,
                                           DELIVERY_TEAM_FTE, CONTRACTOR_C_FTE, CONTRACTOR_CS)
                        VALUES (%s, %s, %s, %s, %s, %s, %s)
                        """,
                        (teamid, name, programid, teamfte, delivery_team_fte, contractor_c_fte, contractor_cs),
                    )
                    st.success("Team created.")
                    st.cache_data.clear()
                    st.rerun()
                except Exception as e:
                    st.error(f"Create failed: {e}")

with st.expander("‚úèÔ∏è Edit Existing Team"):
    teams = _teams_df()
    if teams is not None and not teams.empty:
        selected = st.selectbox("Select Team", teams["TEAMNAME"])
        row = teams[teams["TEAMNAME"] == selected].iloc[0]
        new_name = st.text_input("Team Name", value=row["TEAMNAME"])
        new_fte = st.number_input("Team FTE", value=float(row["TEAMFTE"] or 0), step=0.1)
        new_delivery = st.number_input("Delivery Team FTE", value=float(row["DELIVERY_TEAM_FTE"] or 0), step=0.1)
        new_cc = st.number_input("Contractor C FTE", value=float(row["CONTRACTOR_C_FTE"] or 0), step=0.1)
        new_cs = st.number_input("Contractor CS", value=float(row["CONTRACTOR_CS"] or 0), step=0.1)
        if st.button("Update Team"):
            name = (new_name or "").strip()
            if not name:
                st.error("Team Name is required.")
            else:
                # Ensure uniqueness against other rows
                existing_id = _team_id_for_name_ci(name)
                if existing_id and existing_id != row["TEAMID"]:
                    st.error(f"A Team named '{name}' already exists. Team names must be unique.")
                else:
                    try:
                        execute(
                            """
                            UPDATE TEAMS
                            SET TEAMNAME=%s, TEAMFTE=%s, DELIVERY_TEAM_FTE=%s, CONTRACTOR_C_FTE=%s, CONTRACTOR_CS=%s
                            WHERE TEAMID=%s
                            """,
                            (name, new_fte, new_delivery, new_cc, new_cs, row["TEAMID"]),
                        )
                        st.success("Team updated.")
                        st.cache_data.clear()
                        st.rerun()
                    except Exception as e:
                        st.error(f"Update failed: {e}")

with st.expander("üóëÔ∏è Delete Team"):
    teams = _teams_df()
    if teams is not None and not teams.empty:
        selected = st.selectbox("Select Team to Delete", teams["TEAMNAME"])
        row = teams[teams["TEAMNAME"] == selected].iloc[0]
        if st.button("Delete Selected Team", type="secondary"):
            try:
                execute("DELETE FROM TEAMS WHERE TEAMID=%s", (row["TEAMID"],))
                st.warning("Team deleted.")
                st.cache_data.clear()
                st.rerun()
            except Exception as e:
                st.error(f"Delete failed: {e}")
