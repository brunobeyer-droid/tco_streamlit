import streamlit as st
import uuid
from snowflake_db import ensure_tables, fetch_df, upsert_vendor, delete_vendor
from utils.sidebar import render_global_actions

st.set_page_config(page_title="Vendors", page_icon="üè∑Ô∏è", layout="wide")
render_global_actions()

if "_tco_init" not in st.session_state:
    ensure_tables()
    st.session_state["_tco_init"] = True

st.title("üè∑Ô∏è Vendors")

@st.cache_data(show_spinner=False)
def get_vendors_df():
    return fetch_df("SELECT VENDORID, VENDORNAME FROM VENDORS ORDER BY VENDORNAME")

with st.expander("‚ûï Add / Edit Vendor", expanded=True):
    existing = get_vendors_df()
    options = ["(new)"] + (existing["VENDORNAME"].tolist() if not existing.empty else [])
    choice = st.selectbox("Select Vendor to edit", options)

    if choice == "(new)":
        vendor_id = None
        vendor_name = st.text_input("Vendor Name")
    else:
        row = existing.loc[existing["VENDORNAME"] == choice].iloc[0]
        vendor_id = row["VENDORID"]
        vendor_name = st.text_input("Vendor Name", value=row["VENDORNAME"] or "")

    c1, c2 = st.columns(2)
    if c1.button("üíæ Save Vendor"):
        vid = vendor_id or str(uuid.uuid4())
        upsert_vendor(vid, vendor_name.strip())
        st.cache_data.clear()
        st.success("Vendor saved.")
    if vendor_id and c2.button("üóëÔ∏è Delete Vendor"):
        delete_vendor(vendor_id)
        st.cache_data.clear()
        st.warning("Vendor deleted.")

st.subheader("All Vendors")
st.dataframe(get_vendors_df(), use_container_width=True)

